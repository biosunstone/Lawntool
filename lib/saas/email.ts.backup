import { IQuote } from '@/types/saas'
import { createEmailTransporter } from './email-config'

// Create transporter based on environment
const createTransporter = () => {
  return createEmailTransporter()
}

// Email templates
export const emailTemplates = {
  quoteCreated: (quote: any, customerEmail: string, businessName: string) => ({
    subject: `New Quote ${quote.quoteNumber} from ${businessName}`,
    html: `
      <!DOCTYPE html>
      <html>
        <head>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: #00A651; color: white; padding: 20px; text-align: center; border-radius: 5px 5px 0 0; }
            .content { background: white; padding: 30px; border: 1px solid #ddd; border-radius: 0 0 5px 5px; }
            .quote-details { background: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0; }
            .services { margin: 20px 0; }
            .service-item { padding: 15px; background: white; border: 1px solid #e0e0e0; margin: 10px 0; border-radius: 5px; }
            .totals { margin-top: 20px; padding-top: 20px; border-top: 2px solid #e0e0e0; }
            .total-row { display: flex; justify-content: space-between; padding: 5px 0; }
            .grand-total { font-size: 1.2em; font-weight: bold; color: #00A651; }
            .button { display: inline-block; padding: 12px 30px; background: #00A651; color: white; text-decoration: none; border-radius: 5px; margin: 20px 0; }
            .footer { text-align: center; color: #666; font-size: 0.9em; margin-top: 30px; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>${businessName}</h1>
              <p>Property Service Quote</p>
            </div>
            <div class="content">
              <h2>Quote ${quote.quoteNumber}</h2>
              <p>Dear ${quote.customerId.name},</p>
              <p>Thank you for your interest in our property services. We're pleased to provide you with a detailed quote for your property.</p>
              
              <div class="quote-details">
                <h3>Property Details</h3>
                <p><strong>Address:</strong> ${quote.measurementId.address}</p>
                <p><strong>Total Area:</strong> ${quote.measurementId.measurements.totalArea.toLocaleString()} sq ft</p>
              </div>

              <div class="services">
                <h3>Services</h3>
                ${quote.services.map((service: any) => `
                  <div class="service-item">
                    <strong>${service.name}</strong>
                    ${service.description ? `<p>${service.description}</p>` : ''}
                    <p>${service.area.toLocaleString()} sq ft × $${service.pricePerUnit.toFixed(3)}/sq ft = <strong>$${service.totalPrice.toFixed(2)}</strong></p>
                  </div>
                `).join('')}
              </div>

              <div class="totals">
                <div class="total-row">
                  <span>Subtotal:</span>
                  <span>$${quote.subtotal.toFixed(2)}</span>
                </div>
                <div class="total-row">
                  <span>Tax:</span>
                  <span>$${quote.tax.toFixed(2)}</span>
                </div>
                ${quote.discount > 0 ? `
                  <div class="total-row">
                    <span>Discount:</span>
                    <span>-$${quote.discount.toFixed(2)}</span>
                  </div>
                ` : ''}
                <div class="total-row grand-total">
                  <span>Total:</span>
                  <span>$${quote.total.toFixed(2)}</span>
                </div>
              </div>

              ${quote.notes ? `
                <div class="quote-details">
                  <h3>Additional Notes</h3>
                  <p>${quote.notes}</p>
                </div>
              ` : ''}

              <p><strong>This quote is valid until ${new Date(quote.validUntil).toLocaleDateString()}</strong></p>

              <div style="text-align: center;">
                <a href="${process.env.NEXTAUTH_URL}/quote/${quote._id}" class="button">View Quote Online</a>
              </div>

              <div class="footer">
                <p>If you have any questions about this quote, please don't hesitate to contact us.</p>
                <p>© ${new Date().getFullYear()} ${businessName}. All rights reserved.</p>
              </div>
            </div>
          </div>
        </body>
      </html>
    `
  }),

  quoteAccepted: (quote: any, businessEmail: string) => ({
    subject: `Quote ${quote.quoteNumber} has been accepted!`,
    html: `
      <!DOCTYPE html>
      <html>
        <head>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: #00A651; color: white; padding: 20px; text-align: center; border-radius: 5px; }
            .content { padding: 30px; }
            .success-badge { background: #d4edda; color: #155724; padding: 10px 20px; border-radius: 5px; display: inline-block; margin: 20px 0; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>Quote Accepted!</h1>
            </div>
            <div class="content">
              <div class="success-badge">
                <strong>Great news! Quote ${quote.quoteNumber} has been accepted.</strong>
              </div>
              
              <h3>Customer Details:</h3>
              <p><strong>Name:</strong> ${quote.customerId.name}</p>
              <p><strong>Email:</strong> ${quote.customerId.email}</p>
              ${quote.customerId.phone ? `<p><strong>Phone:</strong> ${quote.customerId.phone}</p>` : ''}
              
              <h3>Property:</h3>
              <p>${quote.measurementId.address}</p>
              
              <h3>Total Amount:</h3>
              <p style="font-size: 1.5em; color: #00A651;"><strong>$${quote.total.toFixed(2)}</strong></p>
              
              <p>Please contact the customer to schedule the service.</p>
            </div>
          </div>
        </body>
      </html>
    `
  }),

  quoteRejected: (quote: any, businessEmail: string) => ({
    subject: `Quote ${quote.quoteNumber} was rejected`,
    html: `
      <!DOCTYPE html>
      <html>
        <head>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: #dc3545; color: white; padding: 20px; text-align: center; border-radius: 5px; }
            .content { padding: 30px; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>Quote Rejected</h1>
            </div>
            <div class="content">
              <p>Quote ${quote.quoteNumber} has been rejected by the customer.</p>
              
              <h3>Customer:</h3>
              <p>${quote.customerId.name} (${quote.customerId.email})</p>
              
              <h3>Property:</h3>
              <p>${quote.measurementId.address}</p>
              
              <p>You may want to follow up with the customer to understand their concerns or offer an alternative quote.</p>
            </div>
          </div>
        </body>
      </html>
    `
  })
}

// Send email function
export async function sendEmail(
  to: string,
  subject: string,
  html: string,
  from?: string
) {
  try {
    const transporter = createTransporter()
    const fromEmail = from || process.env.EMAIL_FROM || 'noreply@sunstone.com'

    const info = await transporter.sendMail({
      from: fromEmail,
      to,
      subject,
      html
    })

    console.log('Email sent:', info.messageId)
    
    // If using Ethereal, log the preview URL
    if (info.messageId && !process.env.EMAIL_SERVER && !process.env.EMAIL_SERVER_HOST) {
      const nodemailer = require('nodemailer')
      console.log('Preview URL:', nodemailer.getTestMessageUrl(info))
    }

    return { success: true, messageId: info.messageId }
  } catch (error:any) {
    console.error('Email sending failed:', error)
    return { success: false, error: error.message }
  }
}

// Send quote email
export async function sendQuoteEmail(quote: any, type: 'created' | 'accepted' | 'rejected') {
  try {
    let template
    let to
    let businessInfo

    // Get business information
    const Business = (await import('@/models/Business')).default
    const business = await Business.findById(quote.businessId)
    const businessName = business?.name || 'Sunstone Digital Tech'
    const businessEmail = business?.email || process.env.EMAIL_FROM || 'noreply@sunstone.com'

    switch (type) {
      case 'created':
        template = emailTemplates.quoteCreated(quote, quote.customerId.email, businessName)
        to = quote.customerId.email
        break
      case 'accepted':
        template = emailTemplates.quoteAccepted(quote, businessEmail)
        to = businessEmail
        break
      case 'rejected':
        template = emailTemplates.quoteRejected(quote, businessEmail)
        to = businessEmail
        break
      default:
        throw new Error('Invalid email type')
    }

    const result = await sendEmail(to, template.subject, template.html, businessEmail)
    
    if (result.success) {
      console.log(`Quote ${type} email sent successfully to ${to}`)
    } else {
      console.error(`Failed to send quote ${type} email:`, result.error)
    }

    return result
  } catch (error:any) {
    console.error('Error sending quote email:', error)
    return { success: false, error: error.message }
  }
}

// Create test account for development
export async function createTestEmailAccount() {
  try {
    const nodemailer = require('nodemailer')
    const testAccount = await nodemailer.createTestAccount()
    console.log('Test email account created:')
    console.log('User:', testAccount.user)
    console.log('Pass:', testAccount.pass)
    console.log('SMTP Host:', testAccount.smtp.host)
    console.log('SMTP Port:', testAccount.smtp.port)
    console.log('SMTP Secure:', testAccount.smtp.secure)
    
    return testAccount
  } catch (error) {
    console.error('Failed to create test email account:', error)
    return null
  }
}